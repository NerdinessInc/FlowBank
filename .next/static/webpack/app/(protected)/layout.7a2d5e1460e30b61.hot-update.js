"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(protected)/layout",{

/***/ "(app-pages-browser)/./utils/axios.ts":
/*!************************!*\
  !*** ./utils/axios.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   soapRequest: function() { return /* binding */ soapRequest; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-xml-parser */ \"(app-pages-browser)/./node_modules/fast-xml-parser/src/fxp.js\");\n/* harmony import */ var fast_xml_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst instance = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n    baseURL: \"http://www.ibank.nomase.nerdiness.ca\",\n    headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-Type\": \"application/soap+xml\"\n    }\n});\n// Request Interceptor\ninstance.interceptors.request.use((config)=>{\n    if (config.headers[\"Content-Type\"] === \"application/soap+xml\") {\n        console.log(\"SOAP Request:\", config.data);\n    }\n    return config;\n}, (error)=>{\n    console.error(\"Request Error:\", error);\n    return Promise.reject(error);\n});\n// Response Interceptor\ninstance.interceptors.response.use(async (response)=>{\n    if (response.config.headers[\"Content-Type\"] === \"application/soap+xml; charset=utf-8\") {\n        try {\n            const parser = new fast_xml_parser__WEBPACK_IMPORTED_MODULE_0__.XMLParser();\n            const result = parser.parse(response.data);\n            // Check for SOAP fault\n            const soapBody = result[\"soap:Envelope\"][\"soap:Body\"];\n            if (soapBody[\"soap:Fault\"]) {\n                const fault = soapBody[\"soap:Fault\"];\n                throw new Error(\"SOAP Fault: \".concat(fault[\"soap:Reason\"][\"soap:Text\"]));\n            }\n            // Extract the response body (assuming it's the first child of soap:Body)\n            const responseBodyKey = Object.keys(soapBody).find((key)=>key !== \"soap:Fault\");\n            if (!responseBodyKey) {\n                throw new Error(\"Unable to find response body\");\n            }\n            const responseBody = soapBody[responseBodyKey];\n            // Check for application-level errors (adjust according to your API's error structure)\n            if (responseBody.oraresp && responseBody.oraresp.errors) {\n                throw new Error(\"Application Error: \".concat(responseBody.oraresp.errmsg));\n            }\n            // Replace the XML string with the parsed and processed result\n            response.data = {\n                success: true,\n                data: responseBody\n            };\n        } catch (error) {\n            console.log(error);\n            response.data = {\n                success: false,\n                error: error.message\n            };\n        }\n    }\n    return response;\n}, (error)=>{\n    console.error(\"Response Error:\", error);\n    return Promise.reject({\n        success: false,\n        error: error.message\n    });\n});\n// Helper function to create SOAP envelope\nconst createSoapEnvelope = (body)=>'<?xml version=\"1.0\" encoding=\"utf-8\"?><soap:Envelope xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"><soap:Body>'.concat(body, \"</soap:Body></soap:Envelope>\");\n// Function to make SOAP requests\nconst soapRequest = async (endpoint, body)=>{\n    const response = await instance.post(endpoint, createSoapEnvelope(body), {\n        headers: {\n            \"Content-Type\": \"application/soap+xml; charset=utf-8\"\n        }\n    });\n    return response.data;\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3V0aWxzL2F4aW9zLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBMEI7QUFDa0I7QUFFNUMsTUFBTUUsV0FBV0YsNkNBQUtBLENBQUNHLE1BQU0sQ0FBQztJQUM3QkMsU0FBUztJQUNUQyxTQUFTO1FBQ1IsK0JBQStCO1FBQy9CLGdCQUFnQjtJQUNqQjtBQUNEO0FBRUEsc0JBQXNCO0FBQ3RCSCxTQUFTSSxZQUFZLENBQUNDLE9BQU8sQ0FBQ0MsR0FBRyxDQUNoQyxDQUFDQztJQUNBLElBQUlBLE9BQU9KLE9BQU8sQ0FBQyxlQUFlLEtBQUssd0JBQXdCO1FBQzlESyxRQUFRQyxHQUFHLENBQUMsaUJBQWlCRixPQUFPRyxJQUFJO0lBQ3pDO0lBQ0EsT0FBT0g7QUFDUixHQUNBLENBQUNJO0lBQ0FILFFBQVFHLEtBQUssQ0FBQyxrQkFBa0JBO0lBQ2hDLE9BQU9DLFFBQVFDLE1BQU0sQ0FBQ0Y7QUFDdkI7QUFHRCx1QkFBdUI7QUFDdkJYLFNBQVNJLFlBQVksQ0FBQ1UsUUFBUSxDQUFDUixHQUFHLENBQ2pDLE9BQU9RO0lBQ04sSUFDQ0EsU0FBU1AsTUFBTSxDQUFDSixPQUFPLENBQUMsZUFBZSxLQUN2Qyx1Q0FDQztRQUNELElBQUk7WUFDSCxNQUFNWSxTQUFTLElBQUloQixzREFBU0E7WUFDNUIsTUFBTWlCLFNBQVNELE9BQU9FLEtBQUssQ0FBQ0gsU0FBU0osSUFBSTtZQUV6Qyx1QkFBdUI7WUFDdkIsTUFBTVEsV0FBV0YsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFlBQVk7WUFFckQsSUFBSUUsUUFBUSxDQUFDLGFBQWEsRUFBRTtnQkFDM0IsTUFBTUMsUUFBUUQsUUFBUSxDQUFDLGFBQWE7Z0JBRXBDLE1BQU0sSUFBSUUsTUFBTSxlQUFpRCxPQUFsQ0QsS0FBSyxDQUFDLGNBQWMsQ0FBQyxZQUFZO1lBQ2pFO1lBRUEseUVBQXlFO1lBQ3pFLE1BQU1FLGtCQUFrQkMsT0FBT0MsSUFBSSxDQUFDTCxVQUFVTSxJQUFJLENBQ2pELENBQUNDLE1BQVFBLFFBQVE7WUFHbEIsSUFBSSxDQUFDSixpQkFBaUI7Z0JBQ3JCLE1BQU0sSUFBSUQsTUFBTTtZQUNqQjtZQUVBLE1BQU1NLGVBQWVSLFFBQVEsQ0FBQ0csZ0JBQWdCO1lBRTlDLHNGQUFzRjtZQUN0RixJQUFJSyxhQUFhQyxPQUFPLElBQUlELGFBQWFDLE9BQU8sQ0FBQ0MsTUFBTSxFQUFFO2dCQUN4RCxNQUFNLElBQUlSLE1BQU0sc0JBQWtELE9BQTVCTSxhQUFhQyxPQUFPLENBQUNFLE1BQU07WUFDbEU7WUFFQSw4REFBOEQ7WUFDOURmLFNBQVNKLElBQUksR0FBRztnQkFDZm9CLFNBQVM7Z0JBQ1RwQixNQUFNZ0I7WUFDUDtRQUNELEVBQUUsT0FBT2YsT0FBWTtZQUNwQkgsUUFBUUMsR0FBRyxDQUFDRTtZQUNaRyxTQUFTSixJQUFJLEdBQUc7Z0JBQ2ZvQixTQUFTO2dCQUNUbkIsT0FBT0EsTUFBTW9CLE9BQU87WUFDckI7UUFDRDtJQUNEO0lBRUEsT0FBT2pCO0FBQ1IsR0FDQSxDQUFDSDtJQUNBSCxRQUFRRyxLQUFLLENBQUMsbUJBQW1CQTtJQUVqQyxPQUFPQyxRQUFRQyxNQUFNLENBQUM7UUFDckJpQixTQUFTO1FBQ1RuQixPQUFPQSxNQUFNb0IsT0FBTztJQUNyQjtBQUNEO0FBR0QsMENBQTBDO0FBQzFDLE1BQU1DLHFCQUFxQixDQUFDQyxPQUMzQiwyTkFBZ08sT0FBTEEsTUFBSztBQUVqTyxpQ0FBaUM7QUFDakMsTUFBTUMsY0FBYyxPQUFPQyxVQUFrQkY7SUFDNUMsTUFBTW5CLFdBQVcsTUFBTWQsU0FBU29DLElBQUksQ0FBQ0QsVUFBVUgsbUJBQW1CQyxPQUFPO1FBQ3hFOUIsU0FBUztZQUNSLGdCQUFnQjtRQUNqQjtJQUNEO0lBRUEsT0FBT1csU0FBU0osSUFBSTtBQUNyQjtBQUV1QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy9heGlvcy50cz84NzE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgeyBYTUxQYXJzZXIgfSBmcm9tICdmYXN0LXhtbC1wYXJzZXInO1xuXG5jb25zdCBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7XG5cdGJhc2VVUkw6ICdodHRwOi8vd3d3LmliYW5rLm5vbWFzZS5uZXJkaW5lc3MuY2EnLFxuXHRoZWFkZXJzOiB7XG5cdFx0J0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbic6ICcqJyxcblx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3NvYXAreG1sJyxcblx0fSxcbn0pO1xuXG4vLyBSZXF1ZXN0IEludGVyY2VwdG9yXG5pbnN0YW5jZS5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoXG5cdChjb25maWcpID0+IHtcblx0XHRpZiAoY29uZmlnLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vc29hcCt4bWwnKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnU09BUCBSZXF1ZXN0OicsIGNvbmZpZy5kYXRhKTtcblx0XHR9XG5cdFx0cmV0dXJuIGNvbmZpZztcblx0fSxcblx0KGVycm9yKSA9PiB7XG5cdFx0Y29uc29sZS5lcnJvcignUmVxdWVzdCBFcnJvcjonLCBlcnJvcik7XG5cdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcblx0fVxuKTtcblxuLy8gUmVzcG9uc2UgSW50ZXJjZXB0b3Jcbmluc3RhbmNlLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoXG5cdGFzeW5jIChyZXNwb25zZSkgPT4ge1xuXHRcdGlmIChcblx0XHRcdHJlc3BvbnNlLmNvbmZpZy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9PT1cblx0XHRcdCdhcHBsaWNhdGlvbi9zb2FwK3htbDsgY2hhcnNldD11dGYtOCdcblx0XHQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHBhcnNlciA9IG5ldyBYTUxQYXJzZXIoKTtcblx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gcGFyc2VyLnBhcnNlKHJlc3BvbnNlLmRhdGEpO1xuXG5cdFx0XHRcdC8vIENoZWNrIGZvciBTT0FQIGZhdWx0XG5cdFx0XHRcdGNvbnN0IHNvYXBCb2R5ID0gcmVzdWx0Wydzb2FwOkVudmVsb3BlJ11bJ3NvYXA6Qm9keSddO1xuXG5cdFx0XHRcdGlmIChzb2FwQm9keVsnc29hcDpGYXVsdCddKSB7XG5cdFx0XHRcdFx0Y29uc3QgZmF1bHQgPSBzb2FwQm9keVsnc29hcDpGYXVsdCddO1xuXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBTT0FQIEZhdWx0OiAke2ZhdWx0Wydzb2FwOlJlYXNvbiddWydzb2FwOlRleHQnXX1gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEV4dHJhY3QgdGhlIHJlc3BvbnNlIGJvZHkgKGFzc3VtaW5nIGl0J3MgdGhlIGZpcnN0IGNoaWxkIG9mIHNvYXA6Qm9keSlcblx0XHRcdFx0Y29uc3QgcmVzcG9uc2VCb2R5S2V5ID0gT2JqZWN0LmtleXMoc29hcEJvZHkpLmZpbmQoXG5cdFx0XHRcdFx0KGtleSkgPT4ga2V5ICE9PSAnc29hcDpGYXVsdCdcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoIXJlc3BvbnNlQm9keUtleSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgcmVzcG9uc2UgYm9keScpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29uc3QgcmVzcG9uc2VCb2R5ID0gc29hcEJvZHlbcmVzcG9uc2VCb2R5S2V5XTtcblxuXHRcdFx0XHQvLyBDaGVjayBmb3IgYXBwbGljYXRpb24tbGV2ZWwgZXJyb3JzIChhZGp1c3QgYWNjb3JkaW5nIHRvIHlvdXIgQVBJJ3MgZXJyb3Igc3RydWN0dXJlKVxuXHRcdFx0XHRpZiAocmVzcG9uc2VCb2R5Lm9yYXJlc3AgJiYgcmVzcG9uc2VCb2R5Lm9yYXJlc3AuZXJyb3JzKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBBcHBsaWNhdGlvbiBFcnJvcjogJHtyZXNwb25zZUJvZHkub3JhcmVzcC5lcnJtc2d9YCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXBsYWNlIHRoZSBYTUwgc3RyaW5nIHdpdGggdGhlIHBhcnNlZCBhbmQgcHJvY2Vzc2VkIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZS5kYXRhID0ge1xuXHRcdFx0XHRcdHN1Y2Nlc3M6IHRydWUsXG5cdFx0XHRcdFx0ZGF0YTogcmVzcG9uc2VCb2R5LFxuXHRcdFx0XHR9O1xuXHRcdFx0fSBjYXRjaCAoZXJyb3I6IGFueSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhlcnJvcik7XG5cdFx0XHRcdHJlc3BvbnNlLmRhdGEgPSB7XG5cdFx0XHRcdFx0c3VjY2VzczogZmFsc2UsXG5cdFx0XHRcdFx0ZXJyb3I6IGVycm9yLm1lc3NhZ2UsXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3BvbnNlO1xuXHR9LFxuXHQoZXJyb3IpID0+IHtcblx0XHRjb25zb2xlLmVycm9yKCdSZXNwb25zZSBFcnJvcjonLCBlcnJvcik7XG5cblx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3Qoe1xuXHRcdFx0c3VjY2VzczogZmFsc2UsXG5cdFx0XHRlcnJvcjogZXJyb3IubWVzc2FnZSxcblx0XHR9KTtcblx0fVxuKTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBTT0FQIGVudmVsb3BlXG5jb25zdCBjcmVhdGVTb2FwRW52ZWxvcGUgPSAoYm9keTogc3RyaW5nKSA9PlxuXHRgPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwidXRmLThcIj8+PHNvYXA6RW52ZWxvcGUgeG1sbnM6c29hcD1cImh0dHA6Ly93d3cudzMub3JnLzIwMDMvMDUvc29hcC1lbnZlbG9wZVwiIHhtbG5zOnhzaT1cImh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlXCIgeG1sbnM6eHNkPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWFcIj48c29hcDpCb2R5PiR7Ym9keX08L3NvYXA6Qm9keT48L3NvYXA6RW52ZWxvcGU+YDtcblxuLy8gRnVuY3Rpb24gdG8gbWFrZSBTT0FQIHJlcXVlc3RzXG5jb25zdCBzb2FwUmVxdWVzdCA9IGFzeW5jIChlbmRwb2ludDogc3RyaW5nLCBib2R5OiBzdHJpbmcpID0+IHtcblx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBpbnN0YW5jZS5wb3N0KGVuZHBvaW50LCBjcmVhdGVTb2FwRW52ZWxvcGUoYm9keSksIHtcblx0XHRoZWFkZXJzOiB7XG5cdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3NvYXAreG1sOyBjaGFyc2V0PXV0Zi04Jyxcblx0XHR9LFxuXHR9KTtcblxuXHRyZXR1cm4gcmVzcG9uc2UuZGF0YTtcbn07XG5cbmV4cG9ydCB7IHNvYXBSZXF1ZXN0IH07XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJYTUxQYXJzZXIiLCJpbnN0YW5jZSIsImNyZWF0ZSIsImJhc2VVUkwiLCJoZWFkZXJzIiwiaW50ZXJjZXB0b3JzIiwicmVxdWVzdCIsInVzZSIsImNvbmZpZyIsImNvbnNvbGUiLCJsb2ciLCJkYXRhIiwiZXJyb3IiLCJQcm9taXNlIiwicmVqZWN0IiwicmVzcG9uc2UiLCJwYXJzZXIiLCJyZXN1bHQiLCJwYXJzZSIsInNvYXBCb2R5IiwiZmF1bHQiLCJFcnJvciIsInJlc3BvbnNlQm9keUtleSIsIk9iamVjdCIsImtleXMiLCJmaW5kIiwia2V5IiwicmVzcG9uc2VCb2R5Iiwib3JhcmVzcCIsImVycm9ycyIsImVycm1zZyIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiY3JlYXRlU29hcEVudmVsb3BlIiwiYm9keSIsInNvYXBSZXF1ZXN0IiwiZW5kcG9pbnQiLCJwb3N0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/axios.ts\n"));

/***/ })

});